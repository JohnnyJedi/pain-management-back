package pain_helper_back.treatment_protocol.service;

import lombok.extern.slf4j.Slf4j;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;
import pain_helper_back.common.patients.entity.DrugRecommendation;
import pain_helper_back.common.patients.entity.Patient;
import pain_helper_back.common.patients.entity.Recommendation;
import pain_helper_back.treatment_protocol.entity.TreatmentProtocol;
import pain_helper_back.treatment_protocol.utils.DrugUtils;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Component
@Order(4)
@Slf4j
public class PltRuleApplier implements TreatmentRuleApplier{

/*
PLT (platelet count) ‚Äî —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–æ–º–±–æ—Ü–∏—Ç–æ–≤ (platelets) –≤ –∫—Ä–æ–≤–∏.
–ò–∑–º–µ—Ä—è–µ—Ç—Å—è –≤ —Ç—ã—Å—è—á–∞—Ö –Ω–∞ –º–∏–∫—Ä–æ–ª–∏—Ç—Ä –∫—Ä–æ–≤–∏:
üëâ 1K/¬µL = 1000 —Ç—Ä–æ–º–±–æ—Ü–∏—Ç–æ–≤ –Ω–∞ –º–∏–∫—Ä–æ–ª–∏—Ç—Ä.
150K‚Äì450K/¬µL  ‚Üí  –Ω–æ—Ä–º–∞
<100K/¬µL      ‚Üí  —Ä–∏—Å–∫ –∫—Ä–æ–≤–æ—Ç–µ—á–µ–Ω–∏—è, –Ω—É–∂–Ω–æ –∏–∑–±–µ–≥–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤
*/

    // –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞: "<100K/¬µL - avoid"
    private static final Pattern PLT_PATTERN = Pattern.compile("([<>]=?)\\s*(\\d+)\\s*[Kk]?/?¬µ?[lL]");

    @Override
    public void apply(DrugRecommendation drug, Recommendation recommendation, TreatmentProtocol tp, Patient patient) {
        // –µ—Å–ª–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ —É–∂–µ "–æ—Ç–≤–µ—Ä–≥–Ω—É—Ç" —Ä–∞–Ω–µ–µ ‚Äî –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
        if (!DrugUtils.hasInfo(drug)) return;

        Double patientPlt = patient.getEmr().getLast().getPlt(); // –Ω–∞–ø—Ä–∏–º–µ—Ä, "92" –∏–ª–∏ "120K/¬µL"
        String rule = tp.getPlt();                                 // –Ω–∞–ø—Ä–∏–º–µ—Ä, "<100K/¬µL - avoid"

        if (rule == null || rule.trim().isEmpty() || rule.equalsIgnoreCase("NA")) return;
        if (patientPlt == null) {
            throw new IllegalArgumentException("Patient PLT is null");
        }


        Matcher m = PLT_PATTERN.matcher(rule);
        if (!m.find()) return;

        String operator = m.group(1); // "<" –∏–ª–∏ ">"
        double limit = Double.parseDouble(m.group(2));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ
        boolean below = operator.contains("<") && patientPlt < limit;
        boolean above = operator.contains(">") && patientPlt > limit;

        //–ï—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–Ω–æ ‚Äúavoid‚Äù ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –æ–±–Ω—É–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã DrugRecommendation –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è.
        if ((below || above) && rule.toLowerCase().contains("avoid")) {
            for (DrugRecommendation drugs: recommendation.getDrugs()){
                DrugUtils.clearDrug(drugs);
            }
            recommendation.getComments().add("System: avoid for PLT < " + limit + "K/¬µL (" + patientPlt + "K/¬µL)");
            log.info("Avoid triggered by PLT rule: patient={}, value={}, rule={}", patient.getId(), patientPlt, rule);

        }
    }
}




