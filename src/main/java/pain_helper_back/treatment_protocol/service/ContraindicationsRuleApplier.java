package pain_helper_back.treatment_protocol.service;

import lombok.extern.slf4j.Slf4j;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;
import pain_helper_back.common.patients.entity.Diagnosis;
import pain_helper_back.common.patients.entity.DrugRecommendation;
import pain_helper_back.common.patients.entity.Patient;
import pain_helper_back.common.patients.entity.Recommendation;
import pain_helper_back.treatment_protocol.entity.TreatmentProtocol;
import pain_helper_back.treatment_protocol.utils.DrugUtils;

import java.util.HashSet;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Component
@Slf4j
@Order(10) // üëâ —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤ —Ü–µ–ø–æ—á–∫–µ
public class ContraindicationsRuleApplier implements TreatmentRuleApplier {

    // üëâ —Ä–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ICD-–∫–æ–¥–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: 571.201, E11, I10.9, V45.1103 –∏ —Ç.–¥.
    private static final Pattern ICD_PATTERN = Pattern.compile("[A-Z]?[0-9]{3}(?:\\.[0-9A-Z]+)?");

    @Override
    public void apply(DrugRecommendation drug, Recommendation recommendation, TreatmentProtocol tp, Patient patient) {
        // 1 –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç –≤–æ–æ–±—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –±—ã–ª —Ä–∞–Ω–µ–µ "–æ—á–∏—â–µ–Ω"
        if (!DrugUtils.hasInfo(drug)) return;

        // 2 –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–≥–Ω–æ–∑—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞ (Set<String>) –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π EMR-–∑–∞–ø–∏—Å–∏
        Set<Diagnosis> patientDiagnoses = patient.getEmr().getLast().getDiagnoses();
        if (patientDiagnoses == null || patientDiagnoses.isEmpty()) return;

        // 3 –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)
        String contraindications = tp.getContraindications();
        if (contraindications == null || contraindications.trim().isEmpty() || contraindications.equalsIgnoreCase("NA"))
            return;

        // 4 –ü–∞—Ä—Å–∏–º –≤—Å–µ –∫–æ–¥—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π –≤ Set<String>
        Set<String> contraindicationsSet = extractICDCodes(contraindications);

        // 5 –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ–∑–æ–≤ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞
        for (Diagnosis diagnosis : patientDiagnoses) {
            if (contraindicationsSet.contains(diagnosis.getIcdCode())) {
                // 6 –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –∏—Å–∫–ª—é—á–∞–µ–º –ø—Ä–µ–ø–∞—Ä–∞—Ç
                recommendation.getDrugs().forEach(DrugUtils::clearDrug);
                // 7 –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∞—É–¥–∏—Ç–∞
                recommendation.getComments().add("System: avoid for contraindications: " + diagnosis.getDescription() + " (" + diagnosis.getIcdCode() + ")");
                // 8 –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                log.info("Avoid triggered by contraindications: patient={}, diagnosisCode={}, diagnosisDescription={}", patient.getId(), diagnosis.getIcdCode(), diagnosis.getDescription());
                return;
            }
        }
    }

    //  –ú–µ—Ç–æ–¥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Å–µ—Ö ICD-–∫–æ–¥–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏
    private Set<String> extractICDCodes(String contraindications) {
        Set<String> codes = new HashSet<>();
        Matcher matcher = ICD_PATTERN.matcher(contraindications);
        while (matcher.find()) {
            codes.add(matcher.group());
        }
        return codes;
    }
}