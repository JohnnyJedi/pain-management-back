package pain_helper_back.treatment_protocol.service;

import lombok.extern.slf4j.Slf4j;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;
import pain_helper_back.common.patients.entity.Diagnosis;
import pain_helper_back.common.patients.entity.DrugRecommendation;
import pain_helper_back.common.patients.entity.Patient;
import pain_helper_back.common.patients.entity.Recommendation;
import pain_helper_back.treatment_protocol.entity.TreatmentProtocol;
import pain_helper_back.treatment_protocol.utils.DrugUtils;

import java.util.HashSet;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Component
@Slf4j
@Order(2)
public class ContraindicationsRuleApplier implements TreatmentRuleApplier {

    // –†–µ–≥—É–ª—è—Ä–∫–∞: –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–¥—ã –≤—Ä–æ–¥–µ 571.201, 287.4901, V45.1103 –∏ —Ç.–ø.
    private static final Pattern ICD_PATTERN = Pattern.compile("[A-Z]?[0-9]{3}(?:\\.[0-9A-Z]+)?");

    @Override
    public void apply(DrugRecommendation drug, Recommendation recommendation, TreatmentProtocol tp, Patient patient) {
        if (!DrugUtils.hasInfo(drug)) return;

        Set<Diagnosis> patientDiagnoses = patient.getEmr().getLast().getDiagnoses();
        if (patientDiagnoses == null || patientDiagnoses.isEmpty()) return;

        String contraindications = tp.getContraindications();
        if (contraindications == null || contraindications.trim().isEmpty() || contraindications.equalsIgnoreCase("NA"))
            return;

        Set<String> contraindicationsSet = extractICDCodes(contraindications);

        // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –±–æ–ª–µ–∑–Ω—å –ø–∞—Ü–∏–µ–Ω—Ç–∞
        for (Diagnosis diagnosis : patientDiagnoses) {
            String code = diagnosis.getIcdCode();
            if (code == null) continue;

            // –ò–∑–≤–ª–µ–∫–∞–µ–º "–æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å" ICD ‚Äî –¥–æ —Ç–æ—á–∫–∏ –∏ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É –ø–æ—Å–ª–µ
            String baseCode = getBaseCode(code);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ª—é–±—ã–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–µ–º
            boolean matchFound = contraindicationsSet.stream()
                    .map(this::getBaseCode)
                    .anyMatch(c -> c.equals(baseCode));

            if (matchFound) {
                recommendation.getDrugs().forEach(DrugUtils::clearDrug);
                recommendation.getComments().add(
                        "System: avoid for contraindications (match by base ICD): " +
                                diagnosis.getDescription() + " (" + diagnosis.getIcdCode() + ")"
                );
                log.info("Avoid triggered by contraindications (base match): patient={}, code={}, desc={}",
                        patient.getId(), diagnosis.getIcdCode(), diagnosis.getDescription());
                return;
            }
        }
    }

    /** –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ ICD-–∫–æ–¥—ã –∏–∑ –¥–ª–∏–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å 'OR' –∏ —Ç.–ø. */
    private Set<String> extractICDCodes(String contraindications) {
        Set<String> codes = new HashSet<>();
        Matcher matcher = ICD_PATTERN.matcher(contraindications);
        while (matcher.find()) {
            codes.add(matcher.group());
        }
        return codes;
    }

    /** –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç "–æ—Å–Ω–æ–≤—É" –∫–æ–¥–∞: –¥–æ —Ç–æ—á–∫–∏ –∏ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É –ø–æ—Å–ª–µ (–µ—Å–ª–∏ –µ—Å—Ç—å) */
    private String getBaseCode(String code) {
        if (code == null) return "";
        // –£–±–∏—Ä–∞–µ–º –≤—Å—ë –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏
        int dotIndex = code.indexOf('.');
        if (dotIndex != -1 && dotIndex + 2 <= code.length()) {
            return code.substring(0, Math.min(dotIndex + 2, code.length()));
        }
        // –ï—Å–ª–∏ —Ç–æ—á–∫–∏ –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º –∫–æ–¥
        return code;
    }
}