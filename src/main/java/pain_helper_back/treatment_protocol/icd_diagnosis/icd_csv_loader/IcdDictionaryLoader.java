package pain_helper_back.treatment_protocol.icd_diagnosis.icd_csv_loader;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.CommandLineRunner;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Component;
import pain_helper_back.treatment_protocol.icd_diagnosis.entity.IcdDictionary;
import pain_helper_back.treatment_protocol.icd_diagnosis.repository.IcdDictionaryRepository;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;

@Component
@RequiredArgsConstructor
@Slf4j
public class IcdDictionaryLoader implements CommandLineRunner {

    private final IcdDictionaryRepository repo;

    @Override
    public void run(String... args) throws Exception {

        // üîπ –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ –Ω–µ –ø—É—Å—Ç–∞ ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
        if (repo.count() > 0) {
            log.info("ICD dictionary already loaded");
            return;
        }

        log.info("Loading ICD dictionary from CSV...");

        // üîπ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ resources/
        String path = "icd_dictionary.csv";

        // üîπ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ —á—Ç–µ–Ω–∏—è (Spring -> ClassPathResource)
        try (InputStream is = new ClassPathResource(path).getInputStream();
             BufferedReader reader = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8))) {

            List<IcdDictionary> batch = new ArrayList<>(1000); // –±—É—Ñ–µ—Ä –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏
            String line;
            int total = 0;

            //  –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–∑–∞–≥–æ–ª–æ–≤–æ–∫)
            reader.readLine();

            //  —á–∏—Ç–∞–µ–º –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –≤–µ—Å—å CSV
            while ((line = reader.readLine()) != null) {

                // –¥–µ–ª–∏–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏: –∫–æ–¥ –∏ –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ
                String[] parts = line.split(",", 2);
                if (parts.length < 2) continue; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∏—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

                String code = clean(parts[0]);
                String desc = clean(parts[1]);
                if (code.isEmpty() || desc.isEmpty()) continue; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è

                // —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç ICD –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞—Ç—á
                batch.add(new IcdDictionary(code.toUpperCase(), desc));
                total++;

                // –∫–∞–∂–¥—ã–µ 1000 —Å—Ç—Ä–æ–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∏ –æ—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
                if (batch.size() >= 1000) {
                    repo.saveAll(batch);
                    batch.clear();
                    log.info(" Saved {} records so far...", total);
                }
            }

            // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if (!batch.isEmpty()) repo.saveAll(batch);

            log.info(" ICD dictionary loaded successfully, total {}", total);
        }
    }

    // üîß –£—Ç–∏–ª–∏—Ç–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
    private String clean(String text) {
        return text == null ? "" :
                text.replaceAll("[\\u00A0\\s]+", " ") // –∑–∞–º–µ–Ω—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –Ω–∞ –æ–¥–∏–Ω
                        .replaceAll("[‚Äì‚Äî]", "-")         // –¥–ª–∏–Ω–Ω—ã–µ —Ç–∏—Ä–µ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ
                        .replaceAll("\"", "")            // —É–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –≤–æ–∫—Ä—É–≥ —Ç–µ–∫—Å—Ç–∞
                        .replaceAll(",.*$", "")          // —É–±–∏—Ä–∞–µ–º –≤—Å—ë –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –∑–∞–ø—è—Ç–æ–π (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ short description)
                        .trim();                         // —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
    }
}