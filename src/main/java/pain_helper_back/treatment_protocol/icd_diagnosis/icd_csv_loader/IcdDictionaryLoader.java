package pain_helper_back.treatment_protocol.icd_diagnosis.icd_excel_loader;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.boot.CommandLineRunner;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Component;
import pain_helper_back.treatment_protocol.icd_diagnosis.entity.IcdDictionary;
import pain_helper_back.treatment_protocol.icd_diagnosis.repository.IcdDictionaryRepository;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

@Component
@RequiredArgsConstructor
@Slf4j
public class IcdDictionaryLoader implements CommandLineRunner {
    private final IcdDictionaryRepository repo;

    @Override
    public void run(String... args) throws Exception {
        if (repo.count() > 0) {
            log.info(" ICD dictionary already loaded");
            return;
        }
        log.info(" Loading ICD dictionary...");

        String path = "icd_dictionary.xlsx";
        try (InputStream is = new ClassPathResource(path).getInputStream();
             Workbook workbook = new XSSFWorkbook(is)) {

            Sheet sheet = workbook.getSheetAt(0);
            DataFormatter formatter = new DataFormatter();
            List<IcdDictionary> batch = new ArrayList<>(1000);
            int total = 0;

            for (Row row : sheet) {
                if (row == null || row.getRowNum() == 0) continue;

                String code = clean(formatter.formatCellValue(row.getCell(0)));
                String desc = clean(formatter.formatCellValue(row.getCell(1)));

                if (code.isEmpty() || desc.isEmpty()) continue;

                batch.add(new IcdDictionary(code.toUpperCase(), desc));
                total++;

                // –ö–∞–∂–¥—ã–µ 1000 —Å—Ç—Ä–æ–∫ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                if (batch.size() >= 1000) {
                    repo.saveAll(batch);
                    batch.clear();
                    log.info("üíæ Saved {} records so far...", total);
                }
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
            if (!batch.isEmpty()) repo.saveAll(batch);

            log.info("‚úÖ ICD dictionary loaded successfully, total {} records", total);
        }
    }

    // üîß –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    private String clean(String text) {
        if (text == null) return "";
        return text
                .replaceAll("[\\u00A0\\s]+", " ") // –∑–∞–º–µ–Ω—è–µ—Ç –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
                .replaceAll("[‚Äì‚Äî]", "-")          // –∑–∞–º–µ–Ω—è–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ —Ç–∏—Ä–µ –Ω–∞ –æ–±—ã—á–Ω–æ–µ
                .trim();
    }
}